# AI协作执行规则

## 项目理解和上下文

### 项目核心信息
- **项目类型**: generic
- **开发框架**: 无特定框架
- **编程语言**: javascript
- **TypeScript**: ❌ 未启用
- **测试支持**: ❌ 未配置
- **包管理器**: npm

### 技术栈分析
**依赖关系**:
- 无主要依赖

**开发依赖**:
- 无开发依赖

## 规则分类说明

### 📁 目录结构
- **basic/**: 基础编程规范，所有项目必须遵循
- **module/**: 技术栈特定规范，根据项目技术选择应用
- **workflow/**: 开发流程规范，团队协作和部署相关

### 🎯 规则优先级
1. **项目特定规则** (workflow/) - 最高优先级
2. **技术栈规则** (module/) - 中等优先级
3. **基础通用规则** (basic/) - 基础要求

## 代码生成和修改指导

### ✅ 强制执行的行为
- 严格遵循类型安全原则
- 使用明确的错误处理机制
- 保持代码简洁和可读性
- 添加必要的文档注释

### ❌ 禁止的行为
- 避免使用 any 类型
- 禁止硬编码配置信息
- 避免深层嵌套和复杂的条件判断
- 禁止跳过错误处理

### 🔧 代码风格要求
- 函数命名使用动词开头的驼峰命名
- 组件/类名使用PascalCase
- 常量使用UPPER_SNAKE_CASE
- 文件名使用kebab-case

## 开发工作流程

### 1. 代码理解阶段
- 分析现有代码结构和模式
- 识别项目的架构设计原则
- 理解业务逻辑和数据流

### 2. 代码生成阶段
- 遵循项目现有的代码风格
- 使用相同的设计模式和架构
- 保持与现有代码的一致性

### 3. 质量保证阶段
- 确保类型安全和错误处理
- 验证代码的可读性和维护性
- 检查是否符合项目规范

## 特殊注意事项





---
**生成时间**: 2025-06-30T02:34:05.330Z
**规则版本**: 2.0.0
**配置来源**: 基于文件系统的模板配置
