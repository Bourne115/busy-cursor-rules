---
description:
globs:
alwaysApply: false
---
# Vue 组件开发规范

## 组件架构设计

### 组件类型和职责
Vue 组件应该按照职责明确分类：

**1. 页面组件 (Page Components)**
- 位置：`src/pages/` 或 `src/views/`
- 职责：路由页面的根组件
- 命名：使用 PascalCase，如 `UserProfile.vue`

**2. 布局组件 (Layout Components)**
- 位置：`src/layouts/`
- 职责：页面布局结构
- 示例：`DefaultLayout.vue`, `AuthLayout.vue`

**3. 功能组件 (Feature Components)**
- 位置：`src/components/features/`
- 职责：特定业务功能的复合组件
- 示例：`UserCard.vue`, `ProductList.vue`

**4. 基础组件 (Base Components)**
- 位置：`src/components/base/`
- 职责：通用UI组件，可复用
- 命名：使用 `Base` 前缀，如 `BaseButton.vue`

**5. 表单组件 (Form Components)**
- 位置：`src/components/forms/`
- 职责：表单相关的组件
- 示例：`LoginForm.vue`, `ContactForm.vue`

## Composition API 开发规范

### 组合式函数设计
```vue
<script setup lang="ts">
// 1. 导入和类型定义
import { ref, computed, onMounted, watchEffect } from 'vue'
import type { User, UserPreferences } from '@/types/user'
import { useUserStore } from '@/stores/user'
import { useRouter } from 'vue-router'

// 2. Props 定义（使用 TypeScript）
interface Props {
  userId: string
  showActions?: boolean
  theme?: 'light' | 'dark'
}

const props = withDefaults(defineProps<Props>(), {
  showActions: true,
  theme: 'light'
})

// 3. Emits 定义
interface Emits {
  (e: 'user-updated', user: User): void
  (e: 'action-clicked', action: string): void
}

const emit = defineEmits<Emits>()

// 4. 响应式数据
const loading = ref(false)
const error = ref<string | null>(null)
const user = ref<User | null>(null)

// 5. 计算属性
const displayName = computed(() => {
  if (!user.value) return ''
  return `${user.value.firstName} ${user.value.lastName}`
})

const userActions = computed(() => {
  if (!props.showActions || !user.value) return []
  return [
    { label: '编辑', action: 'edit' },
    { label: '删除', action: 'delete' }
  ]
})

// 6. 组合式函数
const { currentUser, updateUser } = useUserStore()
const router = useRouter()

// 7. 方法定义
const fetchUser = async () => {
  loading.value = true
  error.value = null

  try {
    // API 调用逻辑
    const response = await userApi.getUser(props.userId)
    user.value = response.data
  } catch (err) {
    error.value = err.message
  } finally {
    loading.value = false
  }
}

const handleAction = (action: string) => {
  emit('action-clicked', action)

  switch (action) {
    case 'edit':
      router.push(`/users/${props.userId}/edit`)
      break
    case 'delete':
      // 删除逻辑
      break
  }
}

// 8. 生命周期
onMounted(() => {
  fetchUser()
})

// 9. 监听器
watchEffect(() => {
  if (props.userId) {
    fetchUser()
  }
})

// 10. 暴露给模板的数据和方法
defineExpose({
  refreshUser: fetchUser
})
</script>

<template>
  <div :class="[`user-card--${theme}`, { 'user-card--loading': loading }]">
    <!-- 组件模板内容 -->
  </div>
</template>
```

### 自定义组合式函数
```typescript
// composables/useUserManagement.ts
import { ref, computed } from 'vue'
import type { User } from '@/types/user'

export function useUserManagement() {
  const users = ref<User[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)

  const activeUsers = computed(() =>
    users.value.filter(user => user.status === 'active')
  )

  const fetchUsers = async () => {
    loading.value = true
    try {
      const response = await userApi.getUsers()
      users.value = response.data
    } catch (err) {
      error.value = err.message
    } finally {
      loading.value = false
    }
  }

  const addUser = async (userData: Omit<User, 'id'>) => {
    try {
      const response = await userApi.createUser(userData)
      users.value.push(response.data)
      return response.data
    } catch (err) {
      error.value = err.message
      throw err
    }
  }

  return {
    // 状态
    users: readonly(users),
    loading: readonly(loading),
    error: readonly(error),

    // 计算属性
    activeUsers,

    // 方法
    fetchUsers,
    addUser
  }
}
```

## 组件通信模式

### Props 和 Emits
```vue
<!-- 父组件 -->
<template>
  <UserList
    :users="users"
    :loading="loading"
    @user-select="handleUserSelect"
    @user-delete="handleUserDelete"
  />
</template>

<!-- 子组件：UserList.vue -->
<script setup lang="ts">
interface Props {
  users: User[]
  loading?: boolean
}

interface Emits {
  (e: 'user-select', user: User): void
  (e: 'user-delete', userId: string): void
}

const props = defineProps<Props>()
const emit = defineEmits<Emits>()

const selectUser = (user: User) => {
  emit('user-select', user)
}

const deleteUser = (userId: string) => {
  emit('user-delete', userId)
}
</script>
```

### Provide/Inject 模式
```vue
<!-- 祖先组件 -->
<script setup lang="ts">
import { provide, ref } from 'vue'
import type { Theme } from '@/types/theme'

const theme = ref<Theme>('light')
const toggleTheme = () => {
  theme.value = theme.value === 'light' ? 'dark' : 'light'
}

// 提供主题上下文
provide('theme', {
  theme: readonly(theme),
  toggleTheme
})
</script>

<!-- 后代组件 -->
<script setup lang="ts">
import { inject } from 'vue'
import type { Theme } from '@/types/theme'

interface ThemeContext {
  theme: Readonly<Ref<Theme>>
  toggleTheme: () => void
}

const themeContext = inject<ThemeContext>('theme')

if (!themeContext) {
  throw new Error('ThemeContext not provided')
}

const { theme, toggleTheme } = themeContext
</script>
```

## 状态管理集成

### Pinia Store 使用
```typescript
// stores/user.ts
import { defineStore } from 'pinia'
import type { User } from '@/types/user'

export const useUserStore = defineStore('user', () => {
  // State
  const currentUser = ref<User | null>(null)
  const users = ref<User[]>([])
  const loading = ref(false)

  // Getters
  const isAuthenticated = computed(() => !!currentUser.value)
  const userById = computed(() => (id: string) =>
    users.value.find(user => user.id === id)
  )

  // Actions
  const login = async (credentials: LoginCredentials) => {
    loading.value = true
    try {
      const response = await authApi.login(credentials)
      currentUser.value = response.data.user
      return response.data
    } catch (error) {
      throw error
    } finally {
      loading.value = false
    }
  }

  const logout = () => {
    currentUser.value = null
    // 清理相关状态
  }

  return {
    // State
    currentUser: readonly(currentUser),
    users: readonly(users),
    loading: readonly(loading),

    // Getters
    isAuthenticated,
    userById,

    // Actions
    login,
    logout
  }
})
```

### 组件中使用 Store
```vue
<script setup lang="ts">
import { useUserStore } from '@/stores/user'
import { storeToRefs } from 'pinia'

const userStore = useUserStore()

// 响应式解构
const { currentUser, isAuthenticated } = storeToRefs(userStore)

// 方法直接解构（不需要响应式）
const { login, logout } = userStore

const handleLogin = async (credentials: LoginCredentials) => {
  try {
    await login(credentials)
    // 登录成功处理
  } catch (error) {
    // 错误处理
  }
}
</script>
```

## 组件性能优化

### 懒加载和代码分割
```typescript
// 路由懒加载
const routes = [
  {
    path: '/users',
    component: () => import('@/pages/Users.vue')
  },
  {
    path: '/dashboard',
    component: () => import('@/pages/Dashboard.vue')
  }
]

// 组件懒加载
<script setup lang="ts">
import { defineAsyncComponent } from 'vue'

const LazyChart = defineAsyncComponent(() => import('@/components/Chart.vue'))
</script>
```

### 响应式优化
```vue
<script setup lang="ts">
import { shallowRef, markRaw } from 'vue'

// 对于不需要深度响应式的大型对象
const largeDataSet = shallowRef(new Map())

// 对于不需要响应式的对象
const staticConfig = markRaw({
  apiEndpoint: 'https://api.example.com',
  version: '1.0.0'
})

// 使用 v-once 对于静态内容
</script>

<template>
  <div>
    <!-- 静态内容，只渲染一次 -->
    <h1 v-once>{{ staticTitle }}</h1>

    <!-- 使用 v-memo 缓存复杂计算 -->
    <ExpensiveComponent v-memo="[user.id, user.updatedAt]" :user="user" />
  </div>
</template>
```

## 组件测试规范

### 单元测试
```typescript
// tests/components/UserCard.test.ts
import { mount } from '@vue/test-utils'
import { describe, it, expect, vi } from 'vitest'
import UserCard from '@/components/UserCard.vue'
import type { User } from '@/types/user'

const mockUser: User = {
  id: '1',
  firstName: 'John',
  lastName: 'Doe',
  email: 'john@example.com'
}

describe('UserCard', () => {
  it('should render user information correctly', () => {
    const wrapper = mount(UserCard, {
      props: {
        user: mockUser
      }
    })

    expect(wrapper.text()).toContain('John Doe')
    expect(wrapper.text()).toContain('john@example.com')
  })

  it('should emit user-select event when clicked', async () => {
    const wrapper = mount(UserCard, {
      props: {
        user: mockUser
      }
    })

    await wrapper.find('[data-testid="user-card"]').trigger('click')

    expect(wrapper.emitted('user-select')).toBeTruthy()
    expect(wrapper.emitted('user-select')![0]).toEqual([mockUser])
  })

  it('should show loading state', () => {
    const wrapper = mount(UserCard, {
      props: {
        user: mockUser,
        loading: true
      }
    })

    expect(wrapper.find('[data-testid="loading"]').exists()).toBe(true)
  })
})
```

## 错误处理和边界情况

### 错误边界组件
```vue
<!-- components/ErrorBoundary.vue -->
<script setup lang="ts">
import { ref, onErrorCaptured } from 'vue'

interface Props {
  fallback?: string
}

const props = withDefaults(defineProps<Props>(), {
  fallback: '出现了一个错误'
})

const error = ref<Error | null>(null)

onErrorCaptured((err: Error) => {
  error.value = err
  console.error('Error captured by boundary:', err)
  return false // 阻止错误传播
})

const retry = () => {
  error.value = null
}
</script>

<template>
  <div v-if="error" class="error-boundary">
    <h2>{{ fallback }}</h2>
    <p>{{ error.message }}</p>
    <button @click="retry">重试</button>
  </div>
  <slot v-else />
</template>
```

### 异步错误处理
```vue
<script setup lang="ts">
import { ref } from 'vue'

const loading = ref(false)
const error = ref<string | null>(null)
const data = ref(null)

const fetchData = async () => {
  loading.value = true
  error.value = null

  try {
    const response = await api.getData()
    data.value = response.data
  } catch (err) {
    error.value = err instanceof Error ? err.message : '未知错误'
  } finally {
    loading.value = false
  }
}

// 重试机制
const retry = () => {
  fetchData()
}
</script>

<template>
  <div>
    <div v-if="loading">加载中...</div>
    <div v-else-if="error" class="error">
      <p>{{ error }}</p>
      <button @click="retry">重试</button>
    </div>
    <div v-else-if="data">
      <!-- 正常内容 -->
    </div>
  </div>
</template>
```

## 可访问性 (a11y) 规范

### 语义化和 ARIA
```vue
<template>
  <!-- 使用语义化标签 -->
  <nav aria-label="主导航">
    <ul role="menubar">
      <li role="none">
        <a role="menuitem" href="/home" aria-current="page">首页</a>
      </li>
    </ul>
  </nav>

  <!-- 表单可访问性 -->
  <form @submit.prevent="handleSubmit">
    <div class="form-group">
      <label for="username">用户名</label>
      <input
        id="username"
        v-model="username"
        type="text"
        required
        aria-describedby="username-help"
        :aria-invalid="usernameError ? 'true' : 'false'"
      />
      <div id="username-help" class="help-text">
        请输入您的用户名
      </div>
      <div v-if="usernameError" class="error" role="alert">
        {{ usernameError }}
      </div>
    </div>
  </form>

  <!-- 模态框可访问性 -->
  <dialog
    v-if="showModal"
    ref="modalRef"
    aria-labelledby="modal-title"
    aria-modal="true"
    @keydown.esc="closeModal"
  >
    <h2 id="modal-title">确认删除</h2>
    <p>您确定要删除这个项目吗？</p>
    <button @click="confirmDelete">确认</button>
    <button @click="closeModal">取消</button>
  </dialog>
</template>
```

### 键盘导航
```vue
<script setup lang="ts">
const handleKeydown = (event: KeyboardEvent) => {
  switch (event.key) {
    case 'Enter':
    case ' ':
      event.preventDefault()
      handleSelect()
      break
    case 'ArrowDown':
      event.preventDefault()
      focusNext()
      break
    case 'ArrowUp':
      event.preventDefault()
      focusPrevious()
      break
    case 'Escape':
      event.preventDefault()
      close()
      break
  }
}
</script>

<template>
  <div
    role="listbox"
    tabindex="0"
    @keydown="handleKeydown"
    aria-label="选项列表"
  >
    <div
      v-for="item in items"
      :key="item.id"
      role="option"
      :aria-selected="selectedId === item.id"
      :tabindex="selectedId === item.id ? 0 : -1"
    >
      {{ item.name }}
    </div>
  </div>
</template>
```
