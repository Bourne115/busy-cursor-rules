---
description: 
globs: 
alwaysApply: false
---
# Vue 状态管理规范

## Pinia 状态管理（推荐）

### Store 定义规范
```typescript
// stores/user.ts
import { defineStore } from 'pinia';
import type { User, UserState } from '@/types/user';

export const useUserStore = defineStore('user', {
  state: (): UserState => ({
    currentUser: null,
    users: [],
    loading: false,
    error: null,
  }),

  getters: {
    isAuthenticated: (state) => !!state.currentUser,
    
    getUserById: (state) => {
      return (id: string): User | undefined => {
        return state.users.find(user => user.id === id);
      };
    },

    activeUsers: (state) => {
      return state.users.filter(user => user.status === 'active');
    },
  },

  actions: {
    async fetchUser(id: string) {
      this.loading = true;
      this.error = null;

      try {
        const user = await userApi.getUser(id);
        this.currentUser = user;
      } catch (error) {
        this.error = error instanceof Error ? error.message : '获取用户失败';
        throw error;
      } finally {
        this.loading = false;
      }
    },

    async updateUser(id: string, userData: Partial<User>) {
      try {
        const updatedUser = await userApi.updateUser(id, userData);
        
        // 更新当前用户
        if (this.currentUser?.id === id) {
          this.currentUser = updatedUser;
        }
        
        // 更新用户列表
        const index = this.users.findIndex(user => user.id === id);
        if (index !== -1) {
          this.users[index] = updatedUser;
        }
        
        return updatedUser;
      } catch (error) {
        this.error = error instanceof Error ? error.message : '更新用户失败';
        throw error;
      }
    },

    logout() {
      this.currentUser = null;
      this.users = [];
      this.error = null;
    },
  },
});
```

### 组合式 API Store
```typescript
// stores/todos.ts
import { ref, computed } from 'vue';
import { defineStore } from 'pinia';
import type { Todo } from '@/types/todo';

export const useTodoStore = defineStore('todos', () => {
  // State
  const todos = ref<Todo[]>([]);
  const loading = ref(false);
  const filter = ref<'all' | 'active' | 'completed'>('all');

  // Getters
  const completedTodos = computed(() => 
    todos.value.filter(todo => todo.completed)
  );

  const activeTodos = computed(() => 
    todos.value.filter(todo => !todo.completed)
  );

  const filteredTodos = computed(() => {
    switch (filter.value) {
      case 'active':
        return activeTodos.value;
      case 'completed':
        return completedTodos.value;
      default:
        return todos.value;
    }
  });

  const todoCount = computed(() => ({
    total: todos.value.length,
    active: activeTodos.value.length,
    completed: completedTodos.value.length,
  }));

  // Actions
  async function fetchTodos() {
    loading.value = true;
    try {
      const data = await todoApi.getTodos();
      todos.value = data;
    } catch (error) {
      console.error('Failed to fetch todos:', error);
      throw error;
    } finally {
      loading.value = false;
    }
  }

  function addTodo(text: string) {
    const todo: Todo = {
      id: Date.now().toString(),
      text,
      completed: false,
      createdAt: new Date(),
    };
    todos.value.push(todo);
  }

  function toggleTodo(id: string) {
    const todo = todos.value.find(t => t.id === id);
    if (todo) {
      todo.completed = !todo.completed;
    }
  }

  function removeTodo(id: string) {
    const index = todos.value.findIndex(t => t.id === id);
    if (index > -1) {
      todos.value.splice(index, 1);
    }
  }

  function setFilter(newFilter: typeof filter.value) {
    filter.value = newFilter;
  }

  return {
    // State
    todos: readonly(todos),
    loading: readonly(loading),
    filter: readonly(filter),
    
    // Getters
    completedTodos,
    activeTodos,
    filteredTodos,
    todoCount,
    
    // Actions
    fetchTodos,
    addTodo,
    toggleTodo,
    removeTodo,
    setFilter,
  };
});
```

## 组件中使用 Store

### 基本使用
```vue
<template>
  <div class="user-profile">
    <div v-if="userStore.loading">加载中...</div>
    <div v-else-if="userStore.error" class="error">
      {{ userStore.error }}
    </div>
    <div v-else-if="userStore.currentUser">
      <h1>{{ userStore.currentUser.name }}</h1>
      <p>{{ userStore.currentUser.email }}</p>
      <button @click="handleLogout">退出登录</button>
    </div>
  </div>
</template>

<script setup lang="ts">
import { onMounted } from 'vue';
import { useUserStore } from '@/stores/user';
import { useRouter } from 'vue-router';

const userStore = useUserStore();
const router = useRouter();

onMounted(async () => {
  if (!userStore.isAuthenticated) {
    try {
      await userStore.fetchUser('current');
    } catch (error) {
      router.push('/login');
    }
  }
});

const handleLogout = () => {
  userStore.logout();
  router.push('/login');
};
</script>
```

### 解构使用（注意响应式）
```vue
<script setup lang="ts">
import { storeToRefs } from 'pinia';
import { useTodoStore } from '@/stores/todos';

const todoStore = useTodoStore();

// 解构响应式状态和 getter
const { todos, loading, filteredTodos, todoCount } = storeToRefs(todoStore);

// 直接解构 actions（不需要 storeToRefs）
const { fetchTodos, addTodo, toggleTodo, removeTodo } = todoStore;

// 或者使用不解构的方式
// const { fetchTodos, addTodo } = todoStore;
</script>
```

## Store 间通信

### Store 组合
```typescript
// stores/cart.ts
export const useCartStore = defineStore('cart', () => {
  const userStore = useUserStore(); // 使用其他 store
  
  const items = ref<CartItem[]>([]);

  const addToCart = async (productId: string, quantity: number) => {
    // 检查用户是否登录
    if (!userStore.isAuthenticated) {
      throw new Error('请先登录');
    }

    // 添加到购物车逻辑
    const existingItem = items.value.find(item => item.productId === productId);
    
    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      items.value.push({
        id: Date.now().toString(),
        productId,
        quantity,
        userId: userStore.currentUser!.id,
      });
    }
  };

  return { items, addToCart };
});
```

### 跨 Store 数据同步
```typescript
// stores/notifications.ts
export const useNotificationStore = defineStore('notifications', () => {
  const userStore = useUserStore();
  
  const notifications = ref<Notification[]>([]);

  // 监听用户状态变化
  watch(
    () => userStore.currentUser,
    (newUser, oldUser) => {
      if (!newUser && oldUser) {
        // 用户登出，清除通知
        notifications.value = [];
      } else if (newUser && !oldUser) {
        // 用户登录，获取通知
        fetchNotifications();
      }
    }
  );

  const fetchNotifications = async () => {
    if (userStore.currentUser) {
      const data = await notificationApi.getNotifications(userStore.currentUser.id);
      notifications.value = data;
    }
  };

  return { notifications, fetchNotifications };
});
```

## Vuex 使用规范（遗留项目）

### Module 结构
```typescript
// store/modules/user.ts
import type { Module } from 'vuex';
import type { RootState } from '../index';

export interface UserState {
  currentUser: User | null;
  loading: boolean;
  error: string | null;
}

const userModule: Module<UserState, RootState> = {
  namespaced: true,

  state: {
    currentUser: null,
    loading: false,
    error: null,
  },

  mutations: {
    SET_LOADING(state, loading: boolean) {
      state.loading = loading;
    },

    SET_USER(state, user: User | null) {
      state.currentUser = user;
    },

    SET_ERROR(state, error: string | null) {
      state.error = error;
    },
  },

  actions: {
    async fetchUser({ commit }, id: string) {
      commit('SET_LOADING', true);
      commit('SET_ERROR', null);

      try {
        const user = await userApi.getUser(id);
        commit('SET_USER', user);
      } catch (error) {
        const message = error instanceof Error ? error.message : '获取用户失败';
        commit('SET_ERROR', message);
        throw error;
      } finally {
        commit('SET_LOADING', false);
      }
    },

    logout({ commit }) {
      commit('SET_USER', null);
      commit('SET_ERROR', null);
    },
  },

  getters: {
    isAuthenticated: (state) => !!state.currentUser,
    
    userName: (state) => state.currentUser?.name || '未登录',
  },
};

export default userModule;
```

## 本地状态管理

### 组合式 API 状态管理
```vue
<script setup lang="ts">
import { ref, reactive, computed, watch } from 'vue';

// 简单状态
const count = ref(0);
const message = ref('');

// 复杂状态对象
const formState = reactive({
  name: '',
  email: '',
  age: 0,
  errors: {} as Record<string, string>,
});

// 计算属性
const isFormValid = computed(() => {
  return formState.name.length > 0 && 
         formState.email.includes('@') && 
         formState.age > 0;
});

// 状态变化监听
watch(
  () => formState.email,
  (newEmail) => {
    if (newEmail && !newEmail.includes('@')) {
      formState.errors.email = '请输入有效的邮箱地址';
    } else {
      delete formState.errors.email;
    }
  }
);

// 状态更新方法
const updateField = (field: keyof typeof formState, value: any) => {
  (formState as any)[field] = value;
};

const resetForm = () => {
  Object.assign(formState, {
    name: '',
    email: '',
    age: 0,
    errors: {},
  });
};
</script>
```

### provide/inject 状态共享
```vue
<!-- App.vue -->
<script setup lang="ts">
import { provide, reactive } from 'vue';

// 全局状态
const globalState = reactive({
  theme: 'light',
  language: 'zh-CN',
});

// 全局方法
const toggleTheme = () => {
  globalState.theme = globalState.theme === 'light' ? 'dark' : 'light';
};

const setLanguage = (lang: string) => {
  globalState.language = lang;
};

// 提供给子组件
provide('globalState', globalState);
provide('toggleTheme', toggleTheme);
provide('setLanguage', setLanguage);
</script>

<!-- 子组件中使用 -->
<script setup lang="ts">
import { inject } from 'vue';

const globalState = inject('globalState');
const toggleTheme = inject('toggleTheme');

if (!globalState || !toggleTheme) {
  throw new Error('Global state not provided');
}
</script>
```

## 状态持久化

### Pinia 持久化插件
```typescript
// plugins/pinia-persistence.ts
import { createPinia } from 'pinia';
import { createPersistedState } from 'pinia-plugin-persistedstate';

const pinia = createPinia();

pinia.use(
  createPersistedState({
    // 全局配置
    storage: localStorage,
    serializer: {
      serialize: JSON.stringify,
      deserialize: JSON.parse,
    },
  })
);

export default pinia;
```

```typescript
// stores/settings.ts
export const useSettingsStore = defineStore('settings', {
  state: () => ({
    theme: 'light',
    language: 'zh-CN',
    notifications: true,
  }),

  // 启用持久化
  persist: {
    key: 'app-settings',
    storage: localStorage,
    paths: ['theme', 'language'], // 只持久化指定字段
  },
});
```

## 测试状态管理

### Pinia Store 测试
```typescript
// stores/__tests__/user.test.ts
import { createPinia, setActivePinia } from 'pinia';
import { useUserStore } from '../user';

describe('User Store', () => {
  beforeEach(() => {
    setActivePinia(createPinia());
  });

  it('should initialize with default state', () => {
    const userStore = useUserStore();
    
    expect(userStore.currentUser).toBeNull();
    expect(userStore.loading).toBe(false);
    expect(userStore.error).toBeNull();
  });

  it('should handle user login', async () => {
    const userStore = useUserStore();
    const mockUser = { id: '1', name: 'John', email: 'john@example.com' };
    
    // Mock API call
    vi.mocked(userApi.getUser).mockResolvedValue(mockUser);
    
    await userStore.fetchUser('1');
    
    expect(userStore.currentUser).toEqual(mockUser);
    expect(userStore.isAuthenticated).toBe(true);
  });

  it('should handle logout', () => {
    const userStore = useUserStore();
    
    // 设置初始状态
    userStore.currentUser = { id: '1', name: 'John', email: 'john@example.com' };
    
    userStore.logout();
    
    expect(userStore.currentUser).toBeNull();
    expect(userStore.isAuthenticated).toBe(false);
  });
});
```

## 性能优化

### 状态更新优化
```typescript
// 避免频繁的状态更新
export const useOptimizedStore = defineStore('optimized', () => {
  const items = ref<Item[]>([]);
  
  // 批量更新
  const batchUpdateItems = (updates: Array<{ id: string; changes: Partial<Item> }>) => {
    const itemMap = new Map(items.value.map(item => [item.id, item]));
    
    updates.forEach(({ id, changes }) => {
      const item = itemMap.get(id);
      if (item) {
        Object.assign(item, changes);
      }
    });
    
    // 触发单次响应式更新
    items.value = Array.from(itemMap.values());
  };
  
  return { items, batchUpdateItems };
});
```

### 选择性订阅
```vue
<script setup lang="ts">
import { storeToRefs } from 'pinia';
import { computed } from 'vue';

const userStore = useUserStore();

// 只订阅需要的状态
const { currentUser } = storeToRefs(userStore);

// 避免订阅整个复杂对象
const userName = computed(() => currentUser.value?.name || '');
</script>
```
