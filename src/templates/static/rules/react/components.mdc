---
description:
globs:
alwaysApply: false
---
# React 组件开发规范

## 组件设计原则

### 单一职责原则
每个组件应该只负责一个功能或渲染一个特定的UI部分：

```tsx
// ❌ 组件职责过多
function UserDashboard() {
  // 用户数据获取
  // 权限验证
  // 数据可视化
  // 导航菜单
  // 通知系统
  return (
    <div>
      {/* 复杂的混合内容 */}
    </div>
  );
}

// ✅ 职责分离
function UserDashboard() {
  return (
    <div className="dashboard">
      <Navigation />
      <UserProfile />
      <DataVisualization />
      <NotificationCenter />
    </div>
  );
}

function UserProfile() {
  const { user } = useUser();
  return (
    <div className="user-profile">
      <Avatar src={user.avatar} />
      <UserInfo user={user} />
    </div>
  );
}
```

### 组件组合优于继承
使用组合模式而不是类继承来构建复杂组件：

```tsx
// ❌ 使用继承
class BaseButton extends React.Component {
  render() {
    return <button className="btn">{this.props.children}</button>;
  }
}

class PrimaryButton extends BaseButton {
  render() {
    return <button className="btn btn-primary">{this.props.children}</button>;
  }
}

// ✅ 使用组合
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'small' | 'medium' | 'large';
  children: React.ReactNode;
  onClick?: () => void;
}

function Button({ variant = 'primary', size = 'medium', children, onClick }: ButtonProps) {
  const className = `btn btn-${variant} btn-${size}`;
  
  return (
    <button className={className} onClick={onClick}>
      {children}
    </button>
  );
}

// 使用组合创建特殊按钮
function SubmitButton(props: Omit<ButtonProps, 'variant'>) {
  return <Button variant="primary" {...props} />;
}
```

## 函数组件规范

### 基础函数组件结构
```tsx
import React, { useState, useEffect, useCallback } from 'react';
import { User } from '@/types/user';
import { userService } from '@/services/userService';
import styles from './UserCard.module.css';

interface UserCardProps {
  userId: string;
  onEdit?: (user: User) => void;
  onDelete?: (userId: string) => void;
  className?: string;
}

/**
 * 用户卡片组件
 * 显示用户基本信息，支持编辑和删除操作
 */
function UserCard({ userId, onEdit, onDelete, className }: UserCardProps) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // 获取用户数据
  useEffect(() => {
    let cancelled = false;

    const fetchUser = async () => {
      try {
        setLoading(true);
        setError(null);
        const userData = await userService.getById(userId);
        
        if (!cancelled) {
          setUser(userData);
        }
      } catch (err) {
        if (!cancelled) {
          setError(err instanceof Error ? err.message : '获取用户信息失败');
        }
      } finally {
        if (!cancelled) {
          setLoading(false);
        }
      }
    };

    fetchUser();

    return () => {
      cancelled = true;
    };
  }, [userId]);

  // 处理编辑
  const handleEdit = useCallback(() => {
    if (user && onEdit) {
      onEdit(user);
    }
  }, [user, onEdit]);

  // 处理删除
  const handleDelete = useCallback(() => {
    if (onDelete && window.confirm('确定要删除此用户吗？')) {
      onDelete(userId);
    }
  }, [userId, onDelete]);

  // 加载状态
  if (loading) {
    return <div className={styles.loading}>加载中...</div>;
  }

  // 错误状态
  if (error) {
    return (
      <div className={styles.error}>
        <p>错误: {error}</p>
        <button onClick={() => window.location.reload()}>重试</button>
      </div>
    );
  }

  // 无数据状态
  if (!user) {
    return <div className={styles.empty}>用户不存在</div>;
  }

  return (
    <div className={`${styles.userCard} ${className || ''}`}>
      <div className={styles.avatar}>
        <img src={user.avatar || '/default-avatar.png'} alt={`${user.name}的头像`} />
      </div>
      
      <div className={styles.info}>
        <h3 className={styles.name}>{user.name}</h3>
        <p className={styles.email}>{user.email}</p>
        <p className={styles.role}>{user.role}</p>
      </div>

      <div className={styles.actions}>
        {onEdit && (
          <button 
            type="button"
            className={styles.editButton}
            onClick={handleEdit}
            aria-label={`编辑用户 ${user.name}`}
          >
            编辑
          </button>
        )}
        
        {onDelete && (
          <button 
            type="button"
            className={styles.deleteButton}
            onClick={handleDelete}
            aria-label={`删除用户 ${user.name}`}
          >
            删除
          </button>
        )}
      </div>
    </div>
  );
}

export default React.memo(UserCard);
```

### Props 接口设计
```tsx
// 基础 Props 接口
interface BaseComponentProps {
  className?: string;
  children?: React.ReactNode;
  'data-testid'?: string;
}

// 表单组件 Props
interface FormFieldProps extends BaseComponentProps {
  label: string;
  error?: string;
  required?: boolean;
  disabled?: boolean;
  helperText?: string;
}

// 输入组件 Props
interface InputProps extends FormFieldProps {
  type?: 'text' | 'email' | 'password' | 'number';
  value: string;
  onChange: (value: string) => void;
  onBlur?: () => void;
  placeholder?: string;
  maxLength?: number;
  pattern?: string;
}

// 可控和非可控组件 Props
interface ControlledInputProps {
  value: string;
  onChange: (value: string) => void;
}

interface UncontrolledInputProps {
  defaultValue?: string;
  onChange?: (value: string) => void;
}

type InputComponentProps = BaseComponentProps & (ControlledInputProps | UncontrolledInputProps);

// 条件 Props（互斥属性）
type ButtonProps = BaseComponentProps & {
  children: React.ReactNode;
} & (
  | { variant: 'link'; href: string; onClick?: never }
  | { variant?: 'primary' | 'secondary'; href?: never; onClick: () => void }
);
```

## Hooks 使用规范

### 自定义 Hooks
```tsx
// 数据获取 Hook
interface UseUserOptions {
  enabled?: boolean;
  onSuccess?: (user: User) => void;
  onError?: (error: Error) => void;
}

function useUser(userId: string, options: UseUserOptions = {}) {
  const { enabled = true, onSuccess, onError } = options;
  
  const [state, setState] = useState<{
    user: User | null;
    loading: boolean;
    error: Error | null;
  }>({
    user: null,
    loading: false,
    error: null,
  });

  const fetchUser = useCallback(async () => {
    if (!enabled) return;

    setState(prev => ({ ...prev, loading: true, error: null }));

    try {
      const user = await userService.getById(userId);
      setState({ user, loading: false, error: null });
      onSuccess?.(user);
    } catch (error) {
      const err = error instanceof Error ? error : new Error('Unknown error');
      setState(prev => ({ ...prev, loading: false, error: err }));
      onError?.(err);
    }
  }, [userId, enabled, onSuccess, onError]);

  useEffect(() => {
    fetchUser();
  }, [fetchUser]);

  const refetch = useCallback(() => {
    fetchUser();
  }, [fetchUser]);

  return {
    ...state,
    refetch,
  };
}

// 表单处理 Hook
interface UseFormOptions<T> {
  initialValues: T;
  validate?: (values: T) => Partial<Record<keyof T, string>>;
  onSubmit: (values: T) => Promise<void> | void;
}

function useForm<T extends Record<string, any>>({
  initialValues,
  validate,
  onSubmit,
}: UseFormOptions<T>) {
  const [values, setValues] = useState<T>(initialValues);
  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});
  const [touched, setTouched] = useState<Partial<Record<keyof T, boolean>>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const setValue = useCallback((field: keyof T, value: any) => {
    setValues(prev => ({ ...prev, [field]: value }));
    
    // 清除该字段的错误
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  }, [errors]);

  const setFieldTouched = useCallback((field: keyof T) => {
    setTouched(prev => ({ ...prev, [field]: true }));
  }, []);

  const validateForm = useCallback(() => {
    if (!validate) return {};
    
    const validationErrors = validate(values);
    setErrors(validationErrors);
    return validationErrors;
  }, [values, validate]);

  const handleSubmit = useCallback(async (e?: React.FormEvent) => {
    e?.preventDefault();
    
    const validationErrors = validateForm();
    if (Object.keys(validationErrors).length > 0) {
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(values);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  }, [values, validateForm, onSubmit]);

  const reset = useCallback(() => {
    setValues(initialValues);
    setErrors({});
    setTouched({});
    setIsSubmitting(false);
  }, [initialValues]);

  return {
    values,
    errors,
    touched,
    isSubmitting,
    setValue,
    setFieldTouched,
    handleSubmit,
    reset,
    isValid: Object.keys(errors).length === 0,
  };
}

// 本地存储 Hook
function useLocalStorage<T>(
  key: string,
  initialValue: T
): [T, (value: T | ((prev: T) => T)) => void] {
  const [storedValue, setStoredValue] = useState<T>(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  const setValue = useCallback((value: T | ((prev: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  }, [key, storedValue]);

  return [storedValue, setValue];
}
```

### Hook 使用最佳实践
```tsx
function ComponentWithHooks() {
  // 1. 所有 Hooks 在组件顶部调用
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  const { user, loading } = useUser('123');
  
  // 2. useEffect 依赖数组明确
  useEffect(() => {
    document.title = `Count: ${count}`;
  }, [count]); // 明确依赖

  // 3. 避免在循环、条件或嵌套函数中调用 Hooks
  // ❌ 错误用法
  // if (someCondition) {
  //   const [state, setState] = useState(false);
  // }

  // ✅ 正确用法
  const [conditionalState, setConditionalState] = useState(false);
  
  useEffect(() => {
    if (someCondition) {
      setConditionalState(true);
    }
  }, [someCondition]);

  // 4. 使用 useCallback 缓存事件处理函数
  const handleIncrement = useCallback(() => {
    setCount(prev => prev + 1);
  }, []);

  const handleNameChange = useCallback((newName: string) => {
    setName(newName);
  }, []);

  // 5. 使用 useMemo 缓存计算结果
  const expensiveValue = useMemo(() => {
    return count * 1000; // 假设这是一个昂贵的计算
  }, [count]);

  // 6. 清理副作用
  useEffect(() => {
    const timer = setInterval(() => {
      console.log('Timer tick');
    }, 1000);

    return () => {
      clearInterval(timer);
    };
  }, []);

  return (
    <div>
      <p>Count: {count}</p>
      <p>Name: {name}</p>
      <p>Expensive value: {expensiveValue}</p>
      <button onClick={handleIncrement}>Increment</button>
    </div>
  );
}
```

## 状态管理

### 本地状态 vs 全局状态
```tsx
// 本地状态：仅组件内部使用
function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <span>{count}</span>
      <button onClick={() => setCount(count + 1)}>+</button>
    </div>
  );
}

// 状态提升：多个组件共享
function App() {
  const [globalCount, setGlobalCount] = useState(0);
  
  return (
    <div>
      <CounterDisplay count={globalCount} />
      <CounterControls count={globalCount} setCount={setGlobalCount} />
    </div>
  );
}

// Context：跨组件树共享
interface ThemeContextType {
  theme: 'light' | 'dark';
  toggleTheme: () => void;
}

const ThemeContext = React.createContext<ThemeContextType | undefined>(undefined);

function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<'light' | 'dark'>('light');
  
  const toggleTheme = useCallback(() => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  }, []);

  const value = useMemo(() => ({
    theme,
    toggleTheme,
  }), [theme, toggleTheme]);

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
}

function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}
```

### 复杂状态管理
```tsx
// 使用 useReducer 管理复杂状态
interface TodoState {
  todos: Todo[];
  filter: 'all' | 'active' | 'completed';
  loading: boolean;
  error: string | null;
}

type TodoAction =
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null }
  | { type: 'SET_TODOS'; payload: Todo[] }
  | { type: 'ADD_TODO'; payload: Todo }
  | { type: 'TOGGLE_TODO'; payload: string }
  | { type: 'DELETE_TODO'; payload: string }
  | { type: 'SET_FILTER'; payload: 'all' | 'active' | 'completed' };

function todoReducer(state: TodoState, action: TodoAction): TodoState {
  switch (action.type) {
    case 'SET_LOADING':
      return { ...state, loading: action.payload };
      
    case 'SET_ERROR':
      return { ...state, error: action.payload };
      
    case 'SET_TODOS':
      return { ...state, todos: action.payload, loading: false };
      
    case 'ADD_TODO':
      return { 
        ...state, 
        todos: [...state.todos, action.payload] 
      };
      
    case 'TOGGLE_TODO':
      return {
        ...state,
        todos: state.todos.map(todo =>
          todo.id === action.payload
            ? { ...todo, completed: !todo.completed }
            : todo
        ),
      };
      
    case 'DELETE_TODO':
      return {
        ...state,
        todos: state.todos.filter(todo => todo.id !== action.payload),
      };
      
    case 'SET_FILTER':
      return { ...state, filter: action.payload };
      
    default:
      return state;
  }
}

function TodoApp() {
  const [state, dispatch] = useReducer(todoReducer, {
    todos: [],
    filter: 'all',
    loading: false,
    error: null,
  });

  const addTodo = useCallback((text: string) => {
    const newTodo: Todo = {
      id: Date.now().toString(),
      text,
      completed: false,
      createdAt: new Date(),
    };
    dispatch({ type: 'ADD_TODO', payload: newTodo });
  }, []);

  const toggleTodo = useCallback((id: string) => {
    dispatch({ type: 'TOGGLE_TODO', payload: id });
  }, []);

  const deleteTodo = useCallback((id: string) => {
    dispatch({ type: 'DELETE_TODO', payload: id });
  }, []);

  const filteredTodos = useMemo(() => {
    switch (state.filter) {
      case 'active':
        return state.todos.filter(todo => !todo.completed);
      case 'completed':
        return state.todos.filter(todo => todo.completed);
      default:
        return state.todos;
    }
  }, [state.todos, state.filter]);

  return (
    <div>
      <TodoForm onSubmit={addTodo} />
      <TodoFilter 
        current={state.filter} 
        onChange={(filter) => dispatch({ type: 'SET_FILTER', payload: filter })}
      />
      <TodoList 
        todos={filteredTodos}
        onToggle={toggleTodo}
        onDelete={deleteTodo}
      />
    </div>
  );
}
```

## 性能优化

### React.memo 和 useMemo
```tsx
// 组件记忆化
interface ExpensiveComponentProps {
  data: ComplexData[];
  onItemClick: (id: string) => void;
}

const ExpensiveComponent = React.memo<ExpensiveComponentProps>(({ data, onItemClick }) => {
  // 昂贵的渲染逻辑
  const processedData = useMemo(() => {
    return data.map(item => ({
      ...item,
      formattedValue: formatComplexValue(item.value),
    }));
  }, [data]);

  return (
    <div>
      {processedData.map(item => (
        <Item 
          key={item.id}
          item={item}
          onClick={onItemClick}
        />
      ))}
    </div>
  );
}, (prevProps, nextProps) => {
  // 自定义比较函数
  return (
    prevProps.data === nextProps.data &&
    prevProps.onItemClick === nextProps.onItemClick
  );
});

// 父组件
function Parent() {
  const [data, setData] = useState<ComplexData[]>([]);
  const [otherState, setOtherState] = useState(0);

  // 使用 useCallback 避免不必要的重渲染
  const handleItemClick = useCallback((id: string) => {
    console.log('Item clicked:', id);
  }, []);

  return (
    <div>
      <button onClick={() => setOtherState(prev => prev + 1)}>
        Other State: {otherState}
      </button>
      <ExpensiveComponent 
        data={data}
        onItemClick={handleItemClick}
      />
    </div>
  );
}
```

### 虚拟化长列表
```tsx
import { FixedSizeList as List } from 'react-window';

interface VirtualizedListProps {
  items: Item[];
  onItemClick: (item: Item) => void;
}

function VirtualizedList({ items, onItemClick }: VirtualizedListProps) {
  const Row = useCallback(({ index, style }: { index: number; style: React.CSSProperties }) => {
    const item = items[index];
    
    return (
      <div style={style}>
        <ItemComponent 
          item={item}
          onClick={() => onItemClick(item)}
        />
      </div>
    );
  }, [items, onItemClick]);

  return (
    <List
      height={600}
      itemCount={items.length}
      itemSize={80}
      width="100%"
    >
      {Row}
    </List>
  );
}
```

### 懒加载和代码分割
```tsx
// 组件懒加载
const LazyModal = React.lazy(() => import('./Modal'));
const LazyChart = React.lazy(() => import('./Chart'));

function App() {
  const [showModal, setShowModal] = useState(false);

  return (
    <div>
      <button onClick={() => setShowModal(true)}>
        显示模态框
      </button>
      
      {showModal && (
        <Suspense fallback={<div>加载中...</div>}>
          <LazyModal onClose={() => setShowModal(false)} />
        </Suspense>
      )}
      
      <Suspense fallback={<ChartSkeleton />}>
        <LazyChart data={chartData} />
      </Suspense>
    </div>
  );
}

// 路由级别的代码分割
const HomePage = React.lazy(() => import('@/pages/HomePage'));
const UserPage = React.lazy(() => import('@/pages/UserPage'));
const SettingsPage = React.lazy(() => import('@/pages/SettingsPage'));

function AppRouter() {
  return (
    <Router>
      <Suspense fallback={<PageLoader />}>
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/users" element={<UserPage />} />
          <Route path="/settings" element={<SettingsPage />} />
        </Routes>
      </Suspense>
    </Router>
  );
}
```

## 错误处理

### 错误边界
```tsx
interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
}

class ErrorBoundary extends React.Component<
  React.PropsWithChildren<{}>,
  ErrorBoundaryState
> {
  constructor(props: React.PropsWithChildren<{}>) {
    super(props);
    this.state = {
      hasError: false,
      error: null,
      errorInfo: null,
    };
  }

  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {
    return {
      hasError: true,
      error,
    };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error Boundary caught an error:', error, errorInfo);
    
    // 错误上报
    this.reportError(error, errorInfo);
    
    this.setState({
      errorInfo,
    });
  }

  reportError = (error: Error, errorInfo: ErrorInfo) => {
    // 发送错误到监控服务
    const errorReport = {
      message: error.message,
      stack: error.stack,
      componentStack: errorInfo.componentStack,
      timestamp: new Date().toISOString(),
      userAgent: navigator.userAgent,
      url: window.location.href,
    };

    // 发送到错误监控服务
    fetch('/api/errors', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(errorReport),
    }).catch(console.error);
  };

  handleRetry = () => {
    this.setState({
      hasError: false,
      error: null,
      errorInfo: null,
    });
  };

  render() {
    if (this.state.hasError) {
      return (
        <div className="error-boundary">
          <h2>出现了一些问题</h2>
          <p>抱歉，应用程序遇到了错误。</p>
          
          {process.env.NODE_ENV === 'development' && (
            <details>
              <summary>错误详情 (仅开发环境)</summary>
              <pre>{this.state.error?.stack}</pre>
              <pre>{this.state.errorInfo?.componentStack}</pre>
            </details>
          )}
          
          <button onClick={this.handleRetry}>重试</button>
          <button onClick={() => window.location.reload()}>刷新页面</button>
        </div>
      );
    }

    return this.props.children;
  }
}

// 使用错误边界
function App() {
  return (
    <ErrorBoundary>
      <Header />
      <Main />
      <Footer />
    </ErrorBoundary>
  );
}
```

### 异步错误处理
```tsx
// 自定义错误类型
class ApiError extends Error {
  constructor(
    message: string,
    public status: number,
    public code: string
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

class NetworkError extends Error {
  constructor(message: string = '网络连接失败') {
    super(message);
    this.name = 'NetworkError';
  }
}

// 错误处理 Hook
function useAsyncError() {
  const [, setError] = useState();
  
  return useCallback((error: Error) => {
    setError(() => {
      throw error;
    });
  }, []);
}

// 带错误处理的数据获取组件
function UserProfile({ userId }: { userId: string }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const throwError = useAsyncError();

  useEffect(() => {
    let cancelled = false;

    const fetchUser = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await fetch(`/api/users/${userId}`);
        
        if (!response.ok) {
          if (response.status === 404) {
            throw new ApiError('用户不存在', 404, 'USER_NOT_FOUND');
          } else if (response.status >= 500) {
            throw new ApiError('服务器错误', response.status, 'SERVER_ERROR');
          } else {
            throw new ApiError('请求失败', response.status, 'REQUEST_FAILED');
          }
        }

        const userData = await response.json();
        
        if (!cancelled) {
          setUser(userData);
        }
      } catch (err) {
        if (!cancelled) {
          if (err instanceof ApiError) {
            // 处理 API 错误
            setError(err.message);
            
            if (err.status >= 500) {
              // 服务器错误，抛出给错误边界处理
              throwError(err);
            }
          } else if (err instanceof TypeError) {
            // 网络错误
            const networkError = new NetworkError();
            setError(networkError.message);
          } else {
            // 其他错误
            setError('加载用户信息时出现错误');
            console.error('Unexpected error:', err);
          }
        }
      } finally {
        if (!cancelled) {
          setLoading(false);
        }
      }
    };

    fetchUser();

    return () => {
      cancelled = true;
    };
  }, [userId, throwError]);

  if (loading) {
    return <UserSkeleton />;
  }

  if (error) {
    return (
      <div className="error-message">
        <p>{error}</p>
        <button onClick={() => window.location.reload()}>重试</button>
      </div>
    );
  }

  if (!user) {
    return <div>用户不存在</div>;
  }

  return (
    <div className="user-profile">
      <img src={user.avatar} alt={user.name} />
      <h2>{user.name}</h2>
      <p>{user.email}</p>
    </div>
  );
}
```

## 测试规范

### 组件测试
```tsx
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { UserCard } from './UserCard';
import { userService } from '@/services/userService';

// Mock 服务
jest.mock('@/services/userService');
const mockUserService = userService as jest.Mocked<typeof userService>;

describe('UserCard', () => {
  const mockUser = {
    id: '1',
    name: 'John Doe',
    email: 'john@example.com',
    avatar: 'https://example.com/avatar.jpg',
    role: 'admin',
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('加载状态', () => {
    it('应该显示加载指示器', () => {
      mockUserService.getById.mockImplementation(
        () => new Promise(() => {}) // 永不解决的 Promise
      );

      render(<UserCard userId="1" />);
      
      expect(screen.getByText('加载中...')).toBeInTheDocument();
    });
  });

  describe('成功状态', () => {
    beforeEach(() => {
      mockUserService.getById.mockResolvedValue(mockUser);
    });

    it('应该显示用户信息', async () => {
      render(<UserCard userId="1" />);

      await waitFor(() => {
        expect(screen.getByText(mockUser.name)).toBeInTheDocument();
      });

      expect(screen.getByText(mockUser.email)).toBeInTheDocument();
      expect(screen.getByText(mockUser.role)).toBeInTheDocument();
      expect(screen.getByAltText(`${mockUser.name}的头像`)).toHaveAttribute(
        'src',
        mockUser.avatar
      );
    });

    it('应该调用编辑回调', async () => {
      const onEdit = jest.fn();
      render(<UserCard userId="1" onEdit={onEdit} />);

      await waitFor(() => {
        expect(screen.getByText(mockUser.name)).toBeInTheDocument();
      });

      const editButton = screen.getByRole('button', { name: /编辑用户/i });
      await userEvent.click(editButton);

      expect(onEdit).toHaveBeenCalledWith(mockUser);
    });

    it('应该处理删除确认', async () => {
      const onDelete = jest.fn();
      const confirmSpy = jest.spyOn(window, 'confirm').mockReturnValue(true);

      render(<UserCard userId="1" onDelete={onDelete} />);

      await waitFor(() => {
        expect(screen.getByText(mockUser.name)).toBeInTheDocument();
      });

      const deleteButton = screen.getByRole('button', { name: /删除用户/i });
      await userEvent.click(deleteButton);

      expect(confirmSpy).toHaveBeenCalledWith('确定要删除此用户吗？');
      expect(onDelete).toHaveBeenCalledWith('1');

      confirmSpy.mockRestore();
    });
  });

  describe('错误状态', () => {
    it('应该显示错误信息', async () => {
      const errorMessage = '网络错误';
      mockUserService.getById.mockRejectedValue(new Error(errorMessage));

      render(<UserCard userId="1" />);

      await waitFor(() => {
        expect(screen.getByText(`错误: ${errorMessage}`)).toBeInTheDocument();
      });

      expect(screen.getByRole('button', { name: '重试' })).toBeInTheDocument();
    });
  });

  describe('可访问性', () => {
    beforeEach(() => {
      mockUserService.getById.mockResolvedValue(mockUser);
    });

    it('应该有正确的 ARIA 标签', async () => {
      render(<UserCard userId="1" onEdit={jest.fn()} onDelete={jest.fn()} />);

      await waitFor(() => {
        expect(screen.getByText(mockUser.name)).toBeInTheDocument();
      });

      expect(screen.getByLabelText(`编辑用户 ${mockUser.name}`)).toBeInTheDocument();
      expect(screen.getByLabelText(`删除用户 ${mockUser.name}`)).toBeInTheDocument();
    });
  });
});
```

### Hook 测试
```tsx
import { renderHook, act } from '@testing-library/react';
import { useLocalStorage } from './useLocalStorage';

describe('useLocalStorage', () => {
  beforeEach(() => {
    localStorage.clear();
  });

  it('应该返回初始值', () => {
    const { result } = renderHook(() => useLocalStorage('test-key', 'initial'));
    
    expect(result.current[0]).toBe('initial');
  });

  it('应该更新存储的值', () => {
    const { result } = renderHook(() => useLocalStorage('test-key', 'initial'));
    
    act(() => {
      result.current[1]('updated');
    });

    expect(result.current[0]).toBe('updated');
    expect(localStorage.getItem('test-key')).toBe('"updated"');
  });

  it('应该从 localStorage 读取现有值', () => {
    localStorage.setItem('test-key', '"existing"');
    
    const { result } = renderHook(() => useLocalStorage('test-key', 'initial'));
    
    expect(result.current[0]).toBe('existing');
  });

  it('应该处理 localStorage 错误', () => {
    const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
    
    // Mock localStorage.getItem 抛出错误
    const originalGetItem = localStorage.getItem;
    localStorage.getItem = jest.fn(() => {
      throw new Error('Storage error');
    });

    const { result } = renderHook(() => useLocalStorage('test-key', 'fallback'));
    
    expect(result.current[0]).toBe('fallback');
    expect(consoleSpy).toHaveBeenCalled();

    localStorage.getItem = originalGetItem;
    consoleSpy.mockRestore();
  });
});
```

通过遵循这些React组件开发规范，可以创建可维护、可测试、性能良好的React应用程序。记住要根据项目的具体需求调整这些规范，并在团队中保持一致的编码风格。
